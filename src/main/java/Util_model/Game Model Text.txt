



#  -  Game Model Package  -  


## GameSave  -  Interface

-  Sets everything in the game model to be serializable.

Vars :

Methods :
- String serialize() returns its owner's data in a savable form.
- deSerialize(String data) recieves a part of a save file at a time to load into the game model.



## Game  -  Singleton

- Controls game playing state, loading, pts assignment, and all other global main functions in-game.

Vars :

- hostilesLeft = how many enemies need killed before the level ends.
- score = the player's earned score, earned by killing hostiles.
- time = seconds long the player has been playing in a level. Less time contributes to bonus points at end of level.
- gameLvl = what level the player is currently playing.
- dateTime = the time used for a gamesave event.
- stateDiff = the difficulty level of the game instance.
- stateGame = whether the cuurent game is actively running, paused, or in demo mode.
- playerName = the title name used for game saving.
- entityList = the list of all dynamic world objects currently in the game.
- gameOver = whether the game is over or not.
- cheatMode = whether or not cheatMode is active.

Methods :

- cleanStart() = used on newGame() or progressToNextLever(). Resets all Game vars to their default values.
- cleanLoad() = used on game load. Empties the game entityList.
- play() = resumes game and animation Timer.
- pause() = halts game and animation timer.
- applyBonusPts() = used at completion of a level. Factors in time taken to complete the level to apply bonus points. 


## Entity  -  Abstract Class

- Sets core attributes for every object/entity in the game.

Vars :

- height = the real hit-box height of the object. Immutable.
- width = the real hit-box width of the object. Immutable.
- imgHeight = the percieved ImageView height of the object. Mutable.  Larger when closer, smaller when farther away.
- imgWidth = the percieved ImageView width of the object. Mutable.  Larger when closer, smaller when farther away.
- imgXos = the x-axis offset of the object to center its ImageView with its hit-box.
- imgXos = the y-axis offset of the object to center its ImageView with its hit-box.  
- location = the 2.5D point location of the object.
- vector = the 3-space heading vector that the object has. Can be 0.
- image = the given image URL for the object in a given state. Used to streamline View <-> Model relationship.

Methods :

- spawn() = places object randomly and sets default values for object in-game.
- move() = fundational method of movement for all entities. Moves This.object according to This.vector, and compares distance from This.object to another object. Can be ovverriden for more specific movement, especially for enemy AI's.
- compareDist(Entity otherObj) = gets distance from This.object to given other object.
- collideEvent() = sets how This.object should respond to colliding with another object. Each entity type will have a unique way of responding to a collition event. 


## E_Projecile  -  Object Class

- Inherets from Entity. Bullets and missiles.

Vars :

- typeRound =  what type of round the projectile is.

Methods :


## Entity_Killable  -  Abstract Class

- Subset of Entity. Sets attributes for all game entities containing health.

Vars :

- maxHealth = default starting value of health for object.
- currentHealth = presently held health of object.

Methods :

- checkLife() = examines This.currentHealth. Triggers events when currentHealth reaches thresholds.
- deathEvent() = called when This.currentHealth = 0.
- hurtEvent() = called when This.currentHealth falls below ( This.maxHealth / 2 )
- recoverEvent() = called when This.currentHealth rises above ( This.maxHealth / 2 )

## EK_Scenery  -  Object Class

- Inherets from Entity_Killable. Non-AI objects like walls/barriers, ammo power-ups, destructable crates, etc.

Vars :

- typeScenery = what type of scenery the object is.
- storedItem = (optional) IF a crate or barrel, what power-up is stored within itself.

Methods :


## Entity_Humaniod  -  Abstract Class

- Subset of Entity_Killable. Sets attributes for player and enemy AI.

Vars :

- mag = rounds currently in the EH gun's magazine.
- ammo = rounds currently owned by given EH.
- statePosition = how the given EH is physically positioned. EX: crouching, standing, or walking.
- stateAction = what the given EH is actively doing. EX: shooting, reloading, or dying.
- typeRound = what type of E_Projectile the EH creates when attacking.

Methods :

- attack(Entity entity) = creates a 3-space vector connecting This.object and the recieved entity object. Sets the created 3-space vector as a projectile's Projectile.vector, and sets the  projectile.vector's "r" value to the projectile_entity's speed value. 

## EH_Avatar  -  Object Class

- For extra credit, the Avatar may have special ability cooldown timers and health regeneration components. 

Vars :

Methods :


## EH_LightAI  -  Object Class

- For extra credit, the LightAI may have special ability cooldown timers and other unique features.

Vars :

Methods :


## EH_HeavyAI  -  Object Class

- For extra credit, the HeavyAI may have special ability cooldown timers and other unique features.

Vars :

Methods :


## EH_FlyingAI  -  Object Class

- For extra credit, the FlyingAI may have special ability cooldown timers and other unique features.

Vars :

Methods :


## EH_BossAI  -  Object Class

- For extra credit, the BossAI may have special ability cooldown timers and other unique features.

Vars :

Methods :























#  -  Data Model Package  -  


## Cereal  -  Object Class

-  Primarily, stores gamesave file information.
-  Secondarily, temporarily stores game data, as a gamesave is loaded.

Vars :

- game = the temporariy storage place of game data, as a gamesave is loaded.
- dt = the LocalDateTime of when a given gamesave file was saved/written.
- name = the user name of the given gamesave when the file was saved/written.

Methods :

- Serialize() = converts and writes game content to a .dat file.
- deSerialize(String data) = reads input data from a .dat file into the Game class.
- toString() = prints the metaData of a .dat file to be displayed on the GUI.



## CerealManager  -  Object Manager Class

-  Executes CRUD operations on its listed gamesaves (Cereal). 

Vars :

- cerealList = ArrayList<Cereal> of gamesaves.

Methods :

- loadCerealDir() = reads gamesave.dat file metadata from directory into cerealList.
- loadCerealFile(Cereal loadCereal) = reads input cereal .dat file into the program's Game class.
- saveCerealFile(Cereal gameCereal) = writes program's Game class's contents into a .dat file.
- addCerealFile(Cereal newCereal) = adds input Game state core data to cerealList.
- deleteCerealFile(Cereal deadCereal) = deletes input gamesave.dat file from directory and removes its respective metadata object from cerealList.
- sortList() = sorts cereal in cerealList according to their given LocalDateTime.
- toString() = prints its listed cereals' metaData in a convenient form. (Primarily for debugging purposes.) 



## Score  -  Object Class

-  Stores an individual score's information.

Vars :

- value = integer value of the score.
- dt = the LocalDateTime of when the given score.value was saved/written.
- name = the user name who acheived the given score.value.

Methods :

- Serialize() = writes score content to the Game.score file.
- deSerialize(String data) = reads input data from the Game.score file and stores in.



## ScoreManager  -  Object Manager Class

-  Executes CRUD operations on its listed scores. 

Vars :

- scoreList = ArrayList<Score> of score records.

Methods :

- loadScores() = reads Game.scores file from directory into scorelList.
- saveScores() = writes all scoreList's contents into the Game.scores file.
- addScore(Score newScore) = adds input score data to scoreList.
- deleteCerealFile(Score score) =  removes input score from scoreList.
- sortList() = sorts scores in scoreList according to their given score.values.
- toString() = prints its listed scores in a convenient form. (Primarily for debugging purposes.) 


